ppt slide 1 
hospital management 
a spring boot project done by
1.monika.s
2.ishwarya.g.r
3.nirmala
4.sonali
5.prathiksha

slide 2
Table of contents:
1,INTRODUCTION
2,SYSTEM SOFTWARE USED
3,USED ANNOTATIONS
4,USED METHODOLOGY
5,SPRING PROJECT CLASSES WITH PACKAGE ALONG WITH SCREENSHOTS
6,FRONT END AND BACK END SUUPORTER
7,BACK END DATAS ALONG WITH SCREENSHOTS
8,FRONT END DATAS ALONG WITH SCREENSHOTS
9,POSTMAN WORKING DETAILS 
10,CONCLUSION

SLIDE 3
1,INTRODUCTION:
        Hospital Management System Using Spring Boot Project with adding annotations,methods,many classes and packages,from this project we had specified the details about patients entry with information .we had created a table name as admin and contains some fields . 

2,SYSTEM SOFTWARE USED:
         Spring project ,sql connections driver,mavan project,application properties to run in spring boot,sts tool suite, database sql ,potman app,

3,Spring Boot Annotations:

AUTOWIRED: 
            The @Autowired annotation provides more fine-grained control over where and how autowiring should be accomplished. The @Autowired annotation can be used to autowire bean on the setter method just like @Required annotation, constructor, a property or methods with arbitrary names and/or multiple arguments.

            @Autowired on Setter Methods
You can use @Autowired annotation on setter methods to get rid of the <property> element in XML configuration file. When Spring finds an @Autowired annotation used with setter methods, it tries to perform byType autowiring on the method.

Example

@Component  
public class Customer  
{  
private Person person;  
@Autowired  
public Customer(Person person)   
{   
this.person=person;  
}  
}  
POSTMAPPING:
          The @PostMapping is specialized version of @RequestMapping annotation that acts as a shortcut for @RequestMapping(method = RequestMethod.POST).
          The @PostMapping annotated methods in the @Controller annotated classes handle the HTTP POST requests matched with given URI expression.

@PostMapping Example:
@PostMapping(path = "users", 
        consumes = MediaType.APPLICATION_JSON_VALUE, 
        produces = MediaType.APPLICATION_JSON_VALUE)
public ResponseEntity<User> create(@RequestBody User newUser) {
    User user = userService.save(newUser);
    if (user == null) {
        throw new ServerException();
    } else {
        return new ResponseEntity<>(user, HttpStatus.CREATED);
    }
}

GETMAPPING:
         The @GetMapping annotation is a specialized version of @RequestMapping annotation that acts as a shortcut for @RequestMapping(method = RequestMethod.GET).
         The @GetMapping annotated methods in the @Controller annotated classes handle the HTTP GET requests matched with given URI expression. 
@GetMapping Example:
@RestController
public class UserController {
 
    @Autowired
    UserService userService;
 
    @GetMapping("users")
    public ResponseEntity<List<User>> getAll() {
        return new ResponseEntity<>(userService.getAll(), HttpStatus.OK);
    }
 
    @GetMapping("users/{id}")
    public ResponseEntity<User> getById(@PathVariable long id) {
        Optional<User> user = userService.getById(id);
        if (user.isPresent()) {
            return new ResponseEntity<>(user.get(), HttpStatus.OK);
        } else {
            throw new RecordNotFoundException();
        }
    

DELETEMAPPING:
               The DELETE HTTP method is used to delete the resource and @DeleteMapping annotation for mapping HTTP DELETE requests onto specific handler methods.
Specifically, @DeleteMapping is a composed annotation that acts as a shortcut for @RequestMapping(method = RequestMethod.DELETE).
Example:

@DeleteMapping("/employees/{id}")
public Map<String, Boolean> deleteEmployee(@PathVariable(value = "id") Long employeeId)
  throws ResourceNotFoundException {
    Employee employee = employeeRepository.findById(employeeId)
      .orElseThrow(() -> new ResourceNotFoundException("Employee not found for this id :: " + employeeId));

    employeeRepository.delete(employee);
    Map<String, Boolean> response = new HashMap<>();
    response.put("deleted", Boolean.TRUE);
    return response;
}
PUTMAPPING 
@PutMapping: It maps the HTTP PUT requests on the specific handler method. It is used to create a web service endpoint that creates or updates It is used instead of using: @RequestMapping(method = RequestMethod.PUT)
Example:

@PutMapping("/employees/{id}")
public Map<String, Boolean> deleteEmployee(@PathVariable(value = "id") Long employeeId)
  throws ResourceNotFoundException {
    Employee employee = employeeRepository.findById(employeeId)
      .orElseThrow(() -> new ResourceNotFoundException("Employee not found for this id :: " + employeeId));

    employeeRepository.delete(employee);
    Map<String, Boolean> response = new HashMap<>();
    response.put("deleted", Boolean.TRUE);
    return response;

OVERRIDE:

            The @Override annotation is a standard Java annotation that was first introduced in Java 1.5. The @Override annotation denotes that the child class method overrides the base class method.

For two reasons, the @Override annotation is useful.

       If the annotated method does not actually override anything, the compiler issues a warning.
       It can help to make the source code more readable.
id auto generated
       
Why we use @Override annotation:

Because of the following two advantages, using the @Override annotation when overriding a method is considered a best practice for coding in Java:

1) You’ll get a compile-time error if the programmer makes a mistake while overriding, such as using the wrong method name or parameter types. Because you are informing the compiler that you are overriding this method by using this annotation. If you don’t use the annotation, the sub-class method will be treated as a new method in the subclass (rather than the overriding method).

SERVICE:
@Service annotation is used in your service layer and annotates classes that perform service tasks, often you don't use it but in many case you use this annotation to represent a best practice. For example, you could directly call a DAO class to persist an object to your database but this is horrible.





slide 4 
USED METHODOLOGY:

Get the patient details using GET METHOD in postman 
print the patient details using POST METHOD in postman
changes the patient details using PUT METHOD in postman
delete the patient details if its necessary using DELETE METHOD in postman



slide 5
SPRING PROJECT CLASSES WITH PACKAGE ALONG WITH SCREENSHOTS

 1,demo with main classes 
main clases used to run the spring boot 
The main() is the starting point for JVM to start execution of a Java program. Without the main() method, JVM will not execute the program. The syntax of the main() method is:

Java Main Method

public: It is an access specifier. We should use a public keyword before the main() method so that JVM can identify the execution point of the program. If we use private, protected, and default before the main() method, it will not be visible to JVM.

static: You can make a method static by using the keyword static. We should call the main() method without creating an object. Static methods are the method which invokes without creating the objects, so we do not need any object to call the main() method.

void: In Java, every method has the return type. Void keyword acknowledges the compiler that main() method does not return any value.
             SCREENSHOTS 
2,controller with class name HospitalController

@Controller annotation indicates that the annotated class is a controller. It is a specialization of @Component and is autodetected through classpath scanning. It is typically used in combination with annotated handler methods based on the @RequestMapping annotation. @RestController is a sibling convenience annotation for creating Restful controllers.

               SCREENSHOTS

 3,entity with class name Hospital:

Spring Boot – Understanding Entity Relationships 1 User-Location Relationship. This is an example of has-a relationship. ... 2 Post-User Relationship. This is also an example of has-a relationship. ... 3 Getting Users by Location. Since many Users can have one Location, we would like to get List of User by Location. ... 4 Getting Posts By User.      

            SCREENSHOTS

4,repository with class name HospitalRepository

A repository is a mechanism for encapsulating storage, retrieval, and search behavior which emulates a collection of objects. It is a specialization of the @Component annotation allowing for implementation classes to be autodetected through classpath scanning. Subsequently, question is, what is the use of Jparepository.

           SCREENSHOTS
5,service with interface name HospitalService
         SCREENSHOTS
6,service with class name HospitalServiceImpl
           SCREENSHOTS


slide 6
FRONT END AND BACK END SUUPORTER
  
SQL - Using Views. A view is nothing more than a SQL statement that is stored in the database with an associated name. A view is actually a composition of a table in the form of a predefined SQL query. A view can contain all rows of a table or select rows from a table. A view can be created from one or many tables which depends on.the given fields

          SCREENSHOT

Postman provides a programmable way to visually represent your request responses. Visualization code added to the Tests for a request will render in the Visualize tab for the response body, alongside the Pretty, Raw, and Preview options.    
               SCREENSHOT


slide7

7,BACK END DATAS ALONG WITH SCREENSHOTS

                        SCREENSHOTS 
tables with fileds 


 
slide 8

8,FRONT  END DATAS ALONG WITH SCREENSHOTS

                  SCREENSHOTS

slide 9

9,POSTMAN WORKING DETAILS 

You can access visualizers from the Postman API. The pm.visualizer.set() method takes three parameters:

layout (required): The first parameter is a Handlebars HTML template string.
data (optional): The second parameter is data that you can bind to the template. The properties of this object can be accessed in the template.
options (optional): The third argument is an options object for Handlebars.compile(). You can use this to control how Handlebars compiles the template.
Postman uses the information you pass to pm.visualizer.set() to render an HTML page in the sandbox for the visualizer. You will see this rendered HTML page in the Visualize tab. The layout string is inserted into the <body> of the rendered page, including any JavaScript, CSS, and HTML that the template contains.

Debugging visualizers
You can debug a visualization in Postman by right-clicking in the Visualize area and choosing Inspect visualization. This will open the visualizer Developer Tools attached to the sandbox. You can use it in the same way as debugging a web page.

                                 SCREENSHOTS data in postman 

10,conclusion 



